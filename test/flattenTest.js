const assert  = require("chai").assert;
const flatten = require("../flatten");

describe("#flatten", () => {

  it("[] -> []", () => {
    assert(flatten([]), []);
  });
  it("[1] -> [1]", () => {
    assert(flatten([1]), [1]);
  });
  it("[1] -> [1]", () => {
    assert(flatten([1]), [1]);
  });
  it("[1, 2] -> [1, 2]", () => {
    assert(flatten([1, 2]), [1, 2]);
  });
  it("[1, 2] -> [1, 2]", () => {
    assert(flatten([1, 2]), [1, 2]);
  });
  it("[[1, 2], 3] -> [1, 2, 3]", () => {
    assert(flatten([1, 2]), [1, 2]);
  });
  it("[\"1\"] -> [\"1\"]", () => {
    assert(flatten(["1"]), ["1"]);
  });
  it("[[\"1\"]] -> [\"1\"]", () => {
    assert(flatten([["1"]]), ["1"]);
  });
  it("[\"1\", \"2\"] -> [\"1\", \"2\"]", () => {
    assert(flatten(["1", "2"]), ["1", "2"]);
  });
  it("[[\"1\", \"2\"]] -> [\"1\", \"2\"]", () => {
    assert(flatten([["1", "2"]]), ["1", "2"]);
  });
  it("[[\"1\", \"2\"], \"3\"] -> [\"1\", \"2\", \"3\"]", () => {
    assert(flatten([["1", "2"], "3"]), ["1", "2", "3"]);
  });
  it("[1, 2, [3, 4], 5, [6]] -> [1, 2, 3, 4, 5, 6]", () => {
    assert(flatten([1, 2, [3, 4], 5, [6]]), [1, 2, 3, 4, 5, 6]);
  });
  it("[1, 2, 3, [4, 5, 6], 7, 8, 9] -> [1, 2, 3, 4, 5, 6, 7, 8, 9]", () => {
    assert(flatten([1, 2, 3, [4, 5, 6], 7, 8, 9]), [1, 2, 3, 4, 5, 6, 7, 8, 9]);
  });
  it("[1, 2, 3, [4, 5, 6], 7, 8, 9] -> [1, 2, 3, 4, 5, 6, 7, 8, 9]", () => {
    assert(flatten([1, 2, 3, [4, 5, 6], 7, 8, 9]), [1, 2, 3, 4, 5, 6, 7, 8, 9]);
  });
  // Expected failure:
  it("[1, 2, [3, [4, 5], 6], 7, 8, 9] -> [1, 2, 3, [4, 5], 6, 7, 8, 9]", () => {
    assert(flatten([1, 2, [3, [4, 5], 6], 7, 8, 9]), [1, 2, 3, [4, 5], 6, 7, 8, 9]);
  });
  it("[1, [2, [3, [4, 5], 6], 7, 8], 9] -> [1, 2, [3, [4, 5], 6], 7, 8, 9]", () => {
    assert(flatten([1, [2, [3, [4, 5], 6], 7, 8], 9]), [1, 2, [3, [4, 5], 6], 7, 8, 9]);
  });

});
